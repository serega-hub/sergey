
import requests
import telebot
import os
import random
from config import token    
from logic import classify_dog, gen_pass

smiles = ['üòé','üòÄ','üëç']
money = ['–û—Ä–µ–ª', '–†–µ—à–∫–∞']
rock_scissors_paper = ['–Ω–æ–∂–Ω–∏—Ü—ã','–±—É–º–∞–≥–∞','–∫–∞–º–µ–Ω—å']
images = ['mem1.jpeg' * 10 ,'mem2.jpeg' * 15,'mem3.jpeg' * 20, 'mem4.jpg']
# –ó–∞–º–µ–Ω–∏ 'TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
# –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –æ—Ç BotFather, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å
bot = telebot.TeleBot(token)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! <b>–Ø —Ç–≤–æ–π Telegram –±–æ—Ç.</b>\n<blockquote><u>–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:</u> \n/hello - <i>–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ</i> \n/bye - <i>–ø—Ä–æ—â–∞–Ω–∏–µ</i> \n/pass - <i>–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–∞—Ä–æ–ª—å</i> \n/random_smile - <i>–≤—ã–≤–æ–¥–∏—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Å–º–∞–π–ª–∏–∫</i> \n/heads_or_tails - <i>–û—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞?</i> \n/help - <i>–ø–æ–º–æ–∂–µ—Ç –≤–∞–º</i> \n/info - <i>—Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ –±–æ—Ç–µ</i> \n/rock_scissors_paper_game - <i>–∫–∞–º–µ–Ω—å - –Ω–æ–∂–Ω–∏—Ü—ã - –±—É–º–∞–≥–∞</i> \n/mem - <i>—Ä–∞–Ω–¥–æ–º–Ω—ã–π –º–µ–º</i> \n/duck - <i>–∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏–ª–∏ –≥–∏—Ñ —Å —É—Ç–∫–æ–π</i> \n/nature_new_knowledge - <i>—Ñ–∞–∫—Ç—ã –ø—Ä–æ –ø—Ä–∏—Ä–æ–¥—É</i> </blockquote>", parse_mode='HTML')
@bot.message_handler(commands=['hello'])
def send_hello(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç")

@bot.message_handler(commands=['bye'])
def send_bye(message):
    bot.reply_to(message, "–ü–æ–∫–∞, —É–¥–∞—á–∏!")
    
@bot.message_handler(commands=['pass'])
def send_pass(message):
    password = gen_pass(10)
    bot.reply_to(message, f"–í–∞—à –ø–∞—Ä–æ–ª—å: {password}")

@bot.message_handler(commands=['help'])
def send_bye(message):
    bot.reply_to(message, "–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–≤–µ—á—è–µ—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã! \n<blockquote>–≠—Ç–∏ –∑–∞–ø—Ä–æ—Å—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–∂–∞–≤ /start</blockquote>", parse_mode='HTML')

@bot.message_handler(commands=['info'])
def send_bye(message):
    bot.reply_to(message, "–≠—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π –±–æ—Ç. \n<blockquote><u>–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?</u> \n–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –≠—Ç–∏ –∑–∞–ø—Ä–æ—Å—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–∂–∞–≤ /start</blockquote>", parse_mode='HTML')

@bot.message_handler(commands=['random_smile'])
def send_rs(message):
    x = random.choice(smiles)
    bot.reply_to(message,x)

@bot.message_handler(commands=['heads_or_tails'])
def send_hot(message):
    y = random.choice(money)
    bot.reply_to(message,y)

@bot.message_handler(commands=['nature_new_knowledge'])
def send_nature(message):
    bot.reply_to(message, "–ü—Ä–æ —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏–±—ã —É–∑–Ω–∞—Ç—å? \n/recycling - <i>–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞</i> \n/decomposition - <i>—Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ</i>",parse_mode='HTML')
    
@bot.message_handler(commands=['recycling'])
def send_recycling(message):
    bot.reply_to(message, "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞ –¥–ª—è –Ω–∞—à–µ–≥–æ –º–∏—Ä–∞. \n<blockquote><u>–ü–æ—á–µ–º—É?</u> \n–ü–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –∑–∞—Ö–æ—Ä–æ–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å—ã—Ä—å—è, —Ç–µ–º —Å–∞–º—ã–º —Å–Ω–∏–∑–∏–≤ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö–∞ (–æ—Ç —Å–∂–∏–≥–∞–Ω–∏—è), –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –≤–æ–¥—ã, –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –ø–æ—á–≤—ã (–æ—Ç –∑–∞—Ö–æ—Ä–æ–Ω–µ–Ω–∏—è).</blockquote> \n<u>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –ø—Ä–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É:</u> \n1 - <i>–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ 1 —Ç–æ–Ω–Ω—ã —Å—Ç–µ–∫–ª–∞ —ç–∫–æ–Ω–æ–º–∏—Ç 600 –∫–≥ –ø–µ—Å–∫–∞</i> \n2 - <i>–ö–∞–∂–¥–∞—è —Ç–æ–Ω–Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –±—É–º–∞–≥–∏, –∫–∞—Ä—Ç–æ–Ω–∞ –∏ –≥–æ—Ñ—Ä–æ–∫–∞—Ä—Ç–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç 17 –¥–µ—Ä–µ–≤—å–µ–≤ –∏ 26500 –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã, –∞ —Ç–∞–∫–∂–µ —É–º–µ–Ω—å—à–∞–µ—Ç –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –Ω–∞ 95%, –±–ª–∞–≥–æ–¥–∞—Ä—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ 1750 –ª–∏—Ç—Ä–æ–≤ –Ω–µ—Ñ—Ç–∏ (11 –±–∞—Ä—Ä–µ–ª–µ–π).</i> \n3 - <i>–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∞–ª—é–º–∏–Ω–∏–µ–≤–æ–π –±–∞–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç–Ω–µ—Ä–≥–∏—é, —Ä–∞–≤–Ω—É—é 0,2 –ª–∏—Ç—Ä–∞ –±–µ–Ω–∑–∏–Ω–∞.</i>",parse_mode='HTML')

@bot.message_handler(commands=['decomposition'])
def send_nature(message):
    bot.reply_to(message, "–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ —ç—Ç–æ : <i>—Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ, —Ä–∞—Å–ø–∞–¥ —Å–ª–æ–∂–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ.</i> \n<u>–í—Ä–µ–º—è —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤:</u> \n<b>–í–∏–¥—ã</b>                                    <b>–ü–µ—Ä–∏–æ–¥ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ</b> \n–ü–∏—â–µ–≤—ã–µ –æ—Ç—Ö–æ–¥—ã            –¥–æ 1 –º–µ—Å—è—Ü–∞ \n–ì–∞–∑–µ—Ç–Ω–∞—è –±—É–º–∞–≥–∞              –¥–æ 1 –≥–æ–¥–∞ \n–ë—É–º–∞–≥–∞                                 2 –≥–æ–¥–∞ \n–ö–∞—Ä—Ç–æ–Ω–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏      –¥–æ 1 –≥–æ–¥–∞ \n–ñ–µ–ª–µ–∑–Ω—ã–µ –±–∞–Ω–∫–∏              –¥–æ 10 –ª–µ—Ç \n–ê–≤—Ç–æ–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã        –¥–æ 100 –ª–µ—Ç \n–ê–ª—é–º–∏–Ω–∏–µ–≤—ã–µ –±–∞–Ω–∫–∏    500 –ª–µ—Ç \n–°—Ç–µ–∫–ª–æ                                  –±–æ–ª–µ–µ 1000 –ª–µ—Ç",parse_mode='HTML')


@bot.message_handler(commands=['rock_scissors_paper_game'])
def send_rsp(message):
    bot.reply_to(message, "<u>–í—ã–±–µ—Ä–µ—Ç–µ:</u> \n/rock - <i>–ö–∞–º–µ–Ω—å</i> \n/scissors - <i>–ù–æ–∂–Ω–∏—Ü—ã</i> \n/paper - <i>–ë—É–º–∞–≥–∞</i>",parse_mode='HTML')
    while True:

        #   Paper
        @bot.message_handler(commands=['paper'])
        def send_onepaper(message):
            z = random.choice(rock_scissors_paper)
            if z == '–Ω–æ–∂–Ω–∏—Ü—ã':
                bot.reply_to(message,f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {z}')
                bot.reply_to(message,'–°–æ—Ä—è–Ω, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª!')

            elif  z == '–∫–∞–º–µ–Ω—å':
                bot.reply_to(message,f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {z}')
                bot.reply_to(message,'–£—Ä–∞!!! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!')

            else:
                bot.reply_to(message,f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {z}')
                bot.reply_to(message,'–ù–∏—á—å—è')

        #   Scisssors
        @bot.message_handler(commands=['scissors'])
        def send_onepaper(message):
            z = random.choice(rock_scissors_paper)
            if z == '–∫–∞–º–µ–Ω—å': 
                bot.reply_to(message,f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {z}')        
                bot.reply_to(message,'–£–ø—Å. –ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª ((')

            elif z == '–±—É–º–∞–≥–∞':
                bot.reply_to(message,f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {z}')
                bot.reply_to(message,'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏, —Å—É–ø–µ—Ä!')

            else:
                bot.reply_to(message,f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {z}')
                bot.reply_to(message,'–ù–∏—á—å—è...')

            
        #   Rock
        @bot.message_handler(commands=['rock'])
        def send_onepaper(message):
            z = random.choice(rock_scissors_paper)
            if z == '–±—É–º–∞–≥–∞':
                bot.reply_to(message,f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {z}')
                bot.reply_to(message,'–ù—É, –≤–æ—Ç... –ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª...')

            elif z == '–Ω–æ–∂–Ω–∏—Ü—ã':
                bot.reply_to(message,f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {z}')
                bot.reply_to(message,'–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!')
        
            else:
                bot.reply_to(message,f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {z}')
                bot.reply_to(message,'–≠—Ö... –ù–∏—á—å—è!')
#

@bot.message_handler(commands=['mem'])
def send_mem(message):
    images = os.listdir('m1y2/images')
    img_name = random.choice(images)
    with open(f'm1y2/images/{img_name}', 'rb') as f:  
        bot.send_photo(message.chat.id, f)



def get_duck_image_url():    
    url = 'https://random-d.uk/api/random'
    res = requests.get(url)
    data = res.json()
    return data['url']
    
    
@bot.message_handler(commands=['duck'])
def duck(message):
    '''–ü–æ –∫–æ–º–∞–Ω–¥–µ duck –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_duck_image_url –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ç–∫–∏'''
    image_url = get_duck_image_url()
    bot.reply_to(message, image_url)

@bot.message_handler(content_types=['photo'])    
def fotografiya(message):

    if not message.photo:
        return bot.send_message(message.chat.id,'–í—ã –∑–∞–±—ã–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É :(')

    file_info = bot.get_file(message.photo[-1].file_id)
    file_name = file_info.file_path.split('/')[-1]
    downloaded_file = bot.download_file(file_info.file_path)
    with open(file_name, 'wb') as new_file:
            new_file.write(downloaded_file) 

    dog = classify_dog(message)
    if dog == '–í–µ—Å—Ç-—Ö–∞–π–ª–µ–Ω–¥-—É–∞–π—Ç-—Ç–µ—Ä—å–µ—Ä –°–æ–±–∞—á–∫–∞':
        bot.reply_to(message, '–ï—Å–ª–∏ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–æ —á—Ç–æ —Å–æ–±–∞–∫–∏ –ª–∏–Ω—è—é—Ç —Ç–æ —ç—Ç–∞ —Å–æ–±–∞–∫–∞ –≤–∞–º –ø–æ–¥–æ–π–¥—ë—Ç. –≠—Ç–∏ —Å–æ–±–∞–∫–∏ –Ω–µ –ª–∏–Ω—è—é—Ç.')
    elif dog == '–ü—É–¥–µ–ª—å':
        bot.reply_to(message, '–ï—Å–ª–∏ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–æ —á—Ç–æ —Å–æ–±–∞–∫–∏ –ª–∏–Ω—è—é—Ç —Ç–æ —ç—Ç–∞ —Å–æ–±–∞–∫–∞ –≤–∞–º –ø–æ–¥–æ–π–¥—ë—Ç. –≠—Ç–∏ —Å–æ–±–∞–∫–∏ –Ω–µ –ª–∏–Ω—è—é—Ç.')
    elif dog == '–ë–æ—Ä–∑–∞—è –≥–æ–Ω—á–∞—è':
        bot.reply_to(message, '–ï—Å–ª–∏ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–æ —á—Ç–æ —Å–æ–±–∞–∫–∏ –ª–∏–Ω—è—é—Ç —Ç–æ —ç—Ç–∞ —Å–æ–±–∞–∫–∞ –≤–∞–º –ø–æ–¥–æ–π–¥—ë—Ç. –≠—Ç–∏ —Å–æ–±–∞–∫–∏ –Ω–µ –ª–∏–Ω—è—é—Ç.')
    elif dog == '–ë–æ–∫—Å–µ—Ä':
        bot.reply_to(message, '–ï—Å–ª–∏ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–æ —á—Ç–æ —Å–æ–±–∞–∫–∏ –ª–∏–Ω—è—é—Ç —Ç–æ —ç—Ç–∞ —Å–æ–±–∞–∫–∞ –≤–∞–º –ø–æ–¥–æ–π–¥—ë—Ç. –≠—Ç–∏ —Å–æ–±–∞–∫–∏ –Ω–µ –ª–∏–Ω—è—é—Ç.')
    elif dog == '–ô–æ—Ä–∫—à–∏—Ä—Å–∫–∏–π —Ç–µ—Ä—å–µ—Ä':
        bot.reply_to(message, '–ï—Å–ª–∏ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–æ —á—Ç–æ —Å–æ–±–∞–∫–∏ –ª–∏–Ω—è—é—Ç —Ç–æ —ç—Ç–∞ —Å–æ–±–∞–∫–∞ –≤–∞–º –ø–æ–¥–æ–π–¥—ë—Ç. –≠—Ç–∏ —Å–æ–±–∞–∫–∏ –Ω–µ –ª–∏–Ω—è—é—Ç.')
    elif dog == '–ú–∞–ª—å—Ç–∏–π—Å–∫–∞—è –±–æ–ª–æ–Ω–∫–∞':
        bot.reply_to(message, '–ï—Å–ª–∏ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–æ —á—Ç–æ —Å–æ–±–∞–∫–∏ –ª–∏–Ω—è—é—Ç —Ç–æ —ç—Ç–∞ —Å–æ–±–∞–∫–∞ –≤–∞–º –ø–æ–¥–æ–π–¥—ë—Ç. –≠—Ç–∏ —Å–æ–±–∞–∫–∏ –Ω–µ –ª–∏–Ω—è—é—Ç.')    
    elif dog == '–≠—Ä–¥–µ–ª—å—Ç–µ—Ä—å–µ—Ä':
        bot.reply_to(message, '–ï—Å–ª–∏ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–æ —á—Ç–æ —Å–æ–±–∞–∫–∏ –ª–∏–Ω—è—é—Ç —Ç–æ —ç—Ç–∞ —Å–æ–±–∞–∫–∞ –≤–∞–º –ø–æ–¥–æ–π–¥—ë—Ç. –≠—Ç–∏ —Å–æ–±–∞–∫–∏ –Ω–µ –ª–∏–Ω—è—é—Ç.')
    elif dog == '–î—Ä—É–≥–∏–µ':                        
        bot.reply_to(message, '–ï—Å–ª–∏ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–æ —á—Ç–æ —Å–æ–±–∞–∫–∏ –ª–∏–Ω—è—é—Ç —Ç–æ —ç—Ç–∞ —Å–æ–±–∞–∫–∞ –≤–∞–º –Ω–µ –ø–æ–¥–æ–π–¥—ë—Ç. –≠—Ç–∏ —Å–æ–±–∞–∫–∏ –ª–∏–Ω—è—é—Ç.')
        


bot.polling()